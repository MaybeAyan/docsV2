import{_ as s,o as n,c as a,a as e}from"./app-d5c63569.js";const o={},p=e(`<p>NodeJs 模块化遵循两套规范 <code>commonJS</code> 规范和 <code>esm</code> 规范</p><h3 id="commonjs-规范" tabindex="-1"><a class="header-anchor" href="#commonjs-规范" aria-hidden="true">#</a> CommonJS 规范</h3><p>引入模块 （ require ）支持四种格式</p><ol><li>支持引入内置模块例如 <code>http</code> <code>os</code> <code>fs</code> <code>child_process</code> 等 nodejs 内置模块；</li><li>支持引入第三方模块<code>express</code> <code>md5</code> <code>koa</code> 等；</li><li>支持引入自己编写的模块 <code>./ ../</code> 等；</li><li>支持引入 addon c++ 拓展模块 .node 文件；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node:fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 导入核心模块</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 导入 node_modules 目录下的模块</span>
<span class="token keyword">const</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 导入相对路径下的模块</span>
<span class="token keyword">const</span> nodeModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./myModule.node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 导入扩展模块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出模块 exports 和 module.exports</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想导出对象直接导出数值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="esm-模块规范" tabindex="-1"><a class="header-anchor" href="#esm-模块规范" aria-hidden="true">#</a> ESM 模块规范</h3><p>引入模块 <code>import</code> 必须写在头部</p><blockquote><p>注意使用 ESM 模块时必须开启一个选项 package.json 设置 type: module</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&#39;node:fs&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果要引入 json 文件需要特殊处理，需要增加断言并且指定类型 json， node 低版本不支持</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> data <span class="token keyword">from</span> <span class="token string">&#39;./data.json&#39;</span> <span class="token keyword">assert</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;json&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加载模块的整体对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> all <span class="token keyword">from</span> <span class="token string">&#39;xxx.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>动态导入模块</p><p>import 静态加载不支持掺杂在逻辑中，如果想动态加载请使用 import 函数模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块导出</p><ul><li>导出一个默认对象 default 只能有一个不可重复的 export default</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> defalut <span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;test&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导出变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="cjs-和-esm-的区别" tabindex="-1"><a class="header-anchor" href="#cjs-和-esm-的区别" aria-hidden="true">#</a> CJS 和 ESM 的区别</h3><ol><li><p>Cjs 是基于运行时的同步加载，esm 是基于编译时的异步加载；</p></li><li><p>Cjs 是可以修改值的，esm 值不可修改，是可读的；</p></li><li><p>Cjs 不可以 tree shaking，esm 支持 tree shaking；</p></li><li><p>commonJs 中顶层的 this 指向模块本身，而 esm 中顶层的 this 指向undefined；</p></li></ol>`,27),t=[p];function c(l,i){return n(),a("div",null,t)}const r=s(o,[["render",c],["__file","node-module.html.vue"]]);export{r as default};
