import{_ as n,o as s,c as a,a as e}from"./app-d5c63569.js";const p={},t=e(`<h2 id="node-path模块" tabindex="-1"><a class="header-anchor" href="#node-path模块" aria-hidden="true">#</a> node path模块</h2><h3 id="系统区别" tabindex="-1"><a class="header-anchor" href="#系统区别" aria-hidden="true">#</a> 系统区别</h3><blockquote><p>path 模块在不同的操作系统是由差异的</p></blockquote><p>posix表示可移植操作系统接口，也就是定义了一套标准，遵守这套标准的操作系统有(unix,like unix,linux,macOs,windows wsl)，为什么要定义这套标准，比如在Linux系统启动一个进程需要调用<code>fork</code>函数,在windows启动一个进程需要调用<code>creatprocess</code>函数，这样就会有问题，比如我在linux写好了代码，需要移植到windows发现函数不统一，posix标准的出现就是为了解决这个问题。</p><p>Windows 并没有完全遵循 POSIX 标准。Windows 在设计上采用了不同于 POSIX 的路径表示方法。</p><p>在 Windows 系统中，路径使用反斜杠（<code>\\</code>）作为路径分隔符。这与 POSIX 系统使用的正斜杠（<code>/</code>）是不同的。这是 Windows 系统的历史原因所致，早期的 Windows 操作系统采用了不同的设计选择。</p><h3 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h3><p><code>path.basename() </code> 方法返回的是给定路径中的最后一部分</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;C:\\temp\\myfile.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回: &#39;C:\\temp\\myfile.html&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.dirname()</code> 返回除了最后一个路径的其他路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&#39;/aaaa/bbbb/cccc/index.html&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 返回 /aaaa/bbbb/cccc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.extname</code> 返回拓展名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;/aaaa/bbbb/cccc/index.html.ccc.ddd.aaa&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//.aaa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.join()</code> 拼接路劲</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/cxk&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/ikun&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// /foo/cxk/ikun</span>

<span class="token comment">// 支持 .. ../ ./操作符</span>
path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/foo&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/cxk&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/ikun&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;../&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// /foo/cxk/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.resolve</code> 用于将相对路劲解析并且返回绝对路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果传入了多个绝对路径，它将返回最右边的绝对路径</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;/aaa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/bbb&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/ccc&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// /ccc</span>

<span class="token comment">// 传入绝对路径 + 相对路径</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//  /User/ayan/DeskTop/node/index.js</span>

<span class="token comment">// 如果只传入相对路径</span>
path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 返回工作目录 + index.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.parse</code> 用于解析文件路径。接受一个路径字符串作为输入，并返回一个包含路径各个组成部分的对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;/home/user/dir/file.txt&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;/home/user/dir&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;file&#39;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.format</code> 将 parse 解析出来的对象转换为文件路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;/home/user/documents&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> <span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;file&#39;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
 <span class="token comment">// /home/user/dir/file.txt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),c=[t];function i(o,l){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","node-path.html.vue"]]);export{d as default};
