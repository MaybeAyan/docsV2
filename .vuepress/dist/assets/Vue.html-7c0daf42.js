import{_ as e,o as l,c as i,b as t}from"./app-0b91c857.js";const a={},n=t(`<h3 id="vue-指令相关的使用" tabindex="-1"><a class="header-anchor" href="#vue-指令相关的使用" aria-hidden="true">#</a> Vue 指令相关的使用</h3><hr><p><code>v-model</code> 其实是一个语法糖，背后的本质包含两个操作：</p><ul><li>1、v-bind 是绑定一个 value 属性</li><li>2、v-on 指令给当前元素绑定 input 事件</li></ul><div class="language-Html line-numbers-mode" data-ext="Html"><pre class="language-Html"><code>&lt;input type = &#39;text&#39; v-model=&#39;message&#39;&gt;

&lt;!-- 本质上等同于下列代码 --&gt;

&lt;input type = &#39;text&#39; v-bind:value=&#39;message&#39; v-on:input = &#39;message = $event.target.value&#39;&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="插槽-slot" tabindex="-1"><a class="header-anchor" href="#插槽-slot" aria-hidden="true">#</a> 插槽 slot</h3><hr><ul><li><p>组件中的插槽：</p><ul><li><p>组件的插槽能使我们封装的组件更加具有拓展性</p></li><li><p>让使用者可以决定组件内部的展示内容</p></li></ul></li><li><p>插槽的使用：</p><p>-在组件中添加 <code>&lt;slot&gt;&lt;/slot&gt;</code> 标签</p><p>-插槽的默认值 <code>&lt;slot&gt; xxx &lt;/slot&gt; </code></p><p>-如果有多个值，同时放入到组件进行替换时，一起作为替换元素</p></li></ul><hr><h3 id="nexttick-callback-的使用场景" tabindex="-1"><a class="header-anchor" href="#nexttick-callback-的使用场景" aria-hidden="true">#</a> $nextTick(callback) 的使用场景</h3><hr><ul><li><p>前提：Vue 是依靠数据驱动视图更新的，更新的过程是异步的</p></li><li><p>作用：获取更新之后的 DOM</p></li><li><p>应用场景：</p><ul><li><p>1、如果要在 created()钩子函数中进行的 DOM 操作，由于 created()钩子函数中还未对 DOM 进行任何渲染，所以无法直接操作，需要通过$nextTick()来完成。</p></li><li><p>2、更新数据后，想要使用 js 对新的视图进行操作时。</p></li><li><p>3、在使用某些第三方插件、组件时 ，这些插件需要 dom 动态变化后重新应用该插件，这时候就需要使用$nextTick()来重新应用插件的方法。</p></li></ul></li></ul>`,13),d=[n];function s(c,r){return l(),i("div",null,d)}const o=e(a,[["render",s],["__file","Vue.html.vue"]]);export{o as default};
